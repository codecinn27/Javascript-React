Steps:
1) tailwindcss create frontend folder 
https://tailwindcss.com/docs/guides/create-react-app

2) manually create backend folder (server)
- include subfolder (database, model, controller, router. server.js)

3) create subfolder in client 
-> inside src (component , pages -> Auth -> Register.js , Signin.js)
-> complete setup

4) npm install tailwindcss 
npx tailwindcss init
-> ignore the 8 vulnerabilities

5)input few lines of tailwindcss code to ensure tailwindcss is setup successfully

6) npm install react-router-dom
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import React from 'react';

-> writing route to direct to register or homepage

7) npm install react-icons
- to use google icons
import {FcGoogle} from "react-icons/fc";

8) npm install axios
9) once the basic of frontend registration page done, do axios and write send http post request with credential to check authentication
10)npm install react-toastify

----sample 1 -------
import React from 'react';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const App = () => {
  const notify = () => {
    toast.success("Success notification!");
    toast.error("Error notification!");
    toast.warn("Warning notification!");
    toast.info("Info notification!");
  };

  return (
    <div>
      <ToastContainer />
      <button onClick={notify}>Notify!</button>
    </div>
  );
};

export default App;
------------


11) writing server code
npm install express cors nodemon

CORS stands for Cross-Origin Resource Sharing, a mechanism that allows restricted resources on a web page to be
 requested from another domain outside the domain from which the first resource was served.

--- example 1 ----
const express = require('express');
const cors = require('cors');
const app = express();

const corsOptions = {
  origin: 'http://example.com', // Replace with your client's origin
  methods: 'GET,POST,PUT,DELETE',
  allowedHeaders: ['Content-Type', 'Authorization']
};

app.use(cors(corsOptions));

app.get('/example', (req, res) => {
  res.json({ message: 'This is an example endpoint' });
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});

----------------

12) create router.js
- to give out notification based on status code

13) npm nodemon
npm init
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "nodemon server.js"
  },

14) app.use(express.json());
- to process json data

15) npm i mongoose dotenv
- create mern_stack_p1 database in atlas

16)npm install bcrypt
npm i jsonwebtoken

17) copy from ui of register to create a signin page 
- just change the colour and the api, name ,etc

18) backend code for signin
- success to bcrypt.compare from the input with the data in mongodb and output save
  the token in local cookie like what it did at registration

19) passport (sign in with google)
  i)requirement
    - three module : passport passport-google jwt
    - client id , client secret from google
    - npm i passport passport-google-oauth20 passport-jwt cookie-parser
  ii) in router use passport google instead of writing your own controller function
   
  route.get("auth/google", passport.authenticate("google", 
      { scope: ["profile", "email"],
          session: false
      }));

  iii)in server import passport module 

  iv) in root create passport.js 
   - include (user module, passport module, dotenv with config)
   - passport.use (codeium auto generate everything)

  v)add env file
  - CLIENT_ID=
    CLIENT_SECRET=

  vi) get client id ,client secret in google cloud console
  - need credit card

  vii) initiallize passport and cookie in server.js

  viii) write controller function for /google/callback in route and controller

20) create a protected route 
- prevent user from login homepage without any credential
- client/src/components/auth/protectedRoute.js
- useEffect 
-       <Route path='/' element={
          <ProtectedRoute>
            <Home/>
          </ProtectedRoute>
          }/>
- only authenticate user are allow to access the homepage

21) crud 
  create, get, getById, update, remove

Optional : 
1) extension 
  i) Material Icon Theme
  ii) ES7 React/Redux/GraphQL/React-Native snippets   (rfce for boilerplate for Register)
  iii) Tailwind CSS IntelliSense (hover the tailwindcss code to get more details)
  iv) Bootstrap 5 Quick Snippets
  v)HTML CSS Support
  vi) Auto Import (automatically import thing that need library, help you define on-top)


  client : npm run start
  server: npm start